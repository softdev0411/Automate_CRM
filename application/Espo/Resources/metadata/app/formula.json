{
    "functionList": [
        {
            "name": "ifThenElse",
            "insertText": "ifThenElse(CONDITION, CONSEQUENT, ALTERNATIVE)"
        },
        {
            "name": "ifThen",
            "insertText": "ifThen(CONDITION, CONSEQUENT)"
        },
        {
            "name": "list",
            "insertText": "list(ITEM_1, ITEM_2)"
        },
        {
            "name": "while",
            "insertText": "while(CONDITION, STATEMENT)"
        },
        {
            "name": "string\\concatenate",
            "insertText": "string\\concatenate(STRING_1, STRING_2)"
        },
        {
            "name": "string\\substring",
            "insertText": "string\\substring(STRING, START, LENGTH)"
        },
        {
            "name": "string\\contains",
            "insertText": "string\\contains(STRING, NEEDLE)"
        },
        {
            "name": "string\\pos",
            "insertText": "string\\pos(STRING, NEEDLE)"
        },
        {
            "name": "string\\pad",
            "insertText": "string\\pad(STRING, LENGTH, PAD_STRING)"
        },
        {
            "name": "string\\test",
            "insertText": "string\\test(STRING, REGULAR_EXPRESSION)"
        },
        {
            "name": "string\\length",
            "insertText": "string\\length(STRING)"
        },
        {
            "name": "string\\trim",
            "insertText": "string\\trim(STRING)"
        },
        {
            "name": "string\\lowerCase",
            "insertText": "string\\lowerCase(STRING)"
        },
        {
            "name": "string\\upperCase",
            "insertText": "string\\upperCase(STRING)"
        },
        {
            "name": "string\\match",
            "insertText": "string\\match(STRING, REGULAR_EXPRESSION)"
        },
        {
            "name": "string\\matchAll",
            "insertText": "string\\matchAll(STRING, REGULAR_EXPRESSION)"
        },
        {
            "name": "string\\replace",
            "insertText": "string\\replace(STRING, SEARCH, REPLACE)"
        },
        {
            "name": "datetime\\today",
            "insertText": "datetime\\today()"
        },
        {
            "name": "datetime\\now",
            "insertText": "datetime\\now()"
        },
        {
            "name": "datetime\\format",
            "insertText": "datetime\\format(VALUE)"
        },
        {
            "name": "datetime\\date",
            "insertText": "datetime\\date(VALUE)"
        },
        {
            "name": "datetime\\month",
            "insertText": "datetime\\month(VALUE)"
        },
        {
            "name": "datetime\\year",
            "insertText": "datetime\\year(VALUE)"
        },
        {
            "name": "datetime\\hour",
            "insertText": "datetime\\hour(VALUE)"
        },
        {
            "name": "datetime\\minute",
            "insertText": "datetime\\minute(VALUE)"
        },
        {
            "name": "datetime\\dayOfWeek",
            "insertText": "datetime\\dayOfWeek(VALUE)"
        },
        {
            "name": "datetime\\addMinutes",
            "insertText": "datetime\\addMinutes(VALUE, MINUTES)"
        },
        {
            "name": "datetime\\addHours",
            "insertText": "datetime\\addHours(VALUE, HOURS)"
        },
        {
            "name": "datetime\\addDays",
            "insertText": "datetime\\addDays(VALUE, DAYS)"
        },
        {
            "name": "datetime\\addWeeks",
            "insertText": "datetime\\addWeeks(VALUE, WEEKS)"
        },
        {
            "name": "datetime\\addMonths",
            "insertText": "datetime\\addMonths(VALUE, MONTHS)"
        },
        {
            "name": "datetime\\addYears",
            "insertText": "datetime\\addYears(VALUE, YEARS)"
        },
        {
            "name": "datetime\\diff",
            "insertText": "datetime\\diff(VALUE_1, VALUE_2, INTERVAL_TYPE)"
        },
        {
            "name": "datetime\\closest",
            "insertText": "datetime\\closest(VALUE, TYPE, TARGET, IS_PAST, TIMEZONE)"
        },
        {
            "name": "number\\format",
            "insertText": "number\\format(VALUE)"
        },
        {
            "name": "number\\abs",
            "insertText": "number\\abs(VALUE)"
        },
        {
            "name": "number\\round",
            "insertText": "number\\round(VALUE, PRECISION)"
        },
        {
            "name": "number\\floor",
            "insertText": "number\\floor(VALUE)"
        },
        {
            "name": "number\\ceil",
            "insertText": "number\\ceil(VALUE)"
        },
        {
            "name": "number\\randomInt",
            "insertText": "number\\randomInt(MIN, MAX)"
        },
        {
            "name": "entity\\isNew",
            "insertText": "entity\\isNew()"
        },
        {
            "name": "entity\\isAttributeChanged",
            "insertText": "entity\\isAttributeChanged(ATTRIBUTE)"
        },
        {
            "name": "entity\\isAttributeNotChanged",
            "insertText": "entity\\isAttributeNotChanged(ATTRIBUTE)"
        },
        {
            "name": "entity\\attribute",
            "insertText": "entity\\attribute(ATTRIBUTE)"
        },
        {
            "name": "entity\\attributeFetched",
            "insertText": "entity\\attributeFetched(ATTRIBUTE)"
        },
        {
            "name": "entity\\setAttribute",
            "insertText": "entity\\setAttribute(ATTRIBUTE, VALUE)"
        },
        {
            "name": "entity\\addLinkMultipleId",
            "insertText": "entity\\addLinkMultipleId(LINK, ID)"
        },
        {
            "name": "entity\\hasLinkMultipleId",
            "insertText": "entity\\hasLinkMultipleId(LINK, ID)"
        },
        {
            "name": "entity\\removeLinkMultipleId",
            "insertText": "entity\\removeLinkMultipleId(LINK, ID)"
        },
        {
            "name": "entity\\getLinkColumn",
            "insertText": "entity\\getLinkColumn(LINK, ID, COLUMN)"
        },
        {
            "name": "entity\\isRelated",
            "insertText": "entity\\isRelated(LINK, ID)"
        },
        {
            "name": "entity\\sumRelated",
            "insertText": "entity\\sumRelated(LINK, FIELD, FILTER)"
        },
        {
            "name": "entity\\countRelated",
            "insertText": "entity\\countRelated(LINK, FILTER)"
        },
        {
            "name": "record\\exists",
            "insertText": "record\\exists(ENTITY_TYPE, KEY, VALUE)"
        },
        {
            "name": "record\\count",
            "insertText": "record\\count(ENTITY_TYPE, KEY, VALUE)"
        },
        {
            "name": "record\\attribute",
            "insertText": "record\\attribute(ENTITY_TYPE, ID, ATTRIBUTE)"
        },
        {
            "name": "record\\findOne",
            "insertText": "record\\findOne(ENTITY_TYPE, ORDER_BY, ORDER, KEY1, VALUE1, KEY2, VALUE2)"
        },
        {
            "name": "record\\findRelatedOne",
            "insertText": "record\\findRelatedOne(ENTITY_TYPE, ID, LINK, ORDER_BY, ORDER, KEY1, VALUE1, KEY2, VALUE2)"
        },
        {
            "name": "record\\findRelatedMany",
            "insertText": "record\\findRelatedMany(ENTITY_TYPE, ID, LINK, LIMIT, ORDER_BY, ORDER, KEY1, VALUE1, KEY2, VALUE2)"
        },
        {
            "name": "record\\relate",
            "insertText": "record\\relate(ENTITY_TYPE, ID, LINK, FOREIGN_ID)"
        },
        {
            "name": "record\\unrelate",
            "insertText": "record\\unrelate(ENTITY_TYPE, ID, LINK, FOREIGN_ID)"
        },
        {
            "name": "record\\create",
            "insertText": "record\\relate(ENTITY_TYPE, ATTRIBUTE1, VALUE1, ATTRIBUTE2, VALUE2)"
        },
        {
            "name": "record\\update",
            "insertText": "record\\update(ENTITY_TYPE, ID, ATTRIBUTE1, VALUE1, ATTRIBUTE2, VALUE2)"
        },
        {
            "name": "record\\relationColumn",
            "insertText": "record\\relationColumn(ENTITY_TYPE, ID, LINK, FOREIGN_ID, COLUMN)"
        },
        {
            "name": "record\\updateRelationColumn",
            "insertText": "record\\updateRelationColumn(ENTITY_TYPE, ID, LINK, FOREIGN_ID, COLUMN, VALUE)"
        },
        {
            "name": "env\\userAttribute",
            "insertText": "env\\userAttribute(ATTRIBUTE)"
        },
        {
            "name": "util\\generateId",
            "insertText": "util\\generateId()"
        },
        {
            "name": "password\\generate",
            "insertText": "password\\generate()"
        },
        {
            "name": "password\\hash",
            "insertText": "password\\hash(PASSWORD)"
        },
        {
            "name": "array\\includes",
            "insertText": "array\\includes(LIST, VALUE)"
        },
        {
            "name": "array\\push",
            "insertText": "array\\push(LIST, VALUE)"
        },
        {
            "name": "array\\length",
            "insertText": "array\\length(LIST)"
        },
        {
            "name": "array\\at",
            "insertText": "array\\at(LIST, INDEX)"
        },
        {
            "name": "array\\join",
            "insertText": "array\\join(LIST, SEPARATOR)"
        },
        {
            "name": "language\\translate",
            "insertText": "language\\translate(LABEL, CATEGORY, SCOPE)"
        },
        {
            "name": "language\\translateOption",
            "insertText": "language\\translateOption(OPTION, FIELD, SCOPE)"
        },
        {
            "name": "json\\retrieve",
            "insertText": "json\\retrieve(JSON, PATH)"
        },
        {
            "name": "ext\\email\\send",
            "insertText": "ext\\email\\send(EMAIL_ID)"
        },
        {
            "name": "ext\\email\\applyTemplate",
            "insertText": "ext\\email\\applyTemplate(EMAIL_ID, EMAIL_TEMPLATE_ID)"
        },
        {
            "name": "ext\\pdf\\generate",
            "insertText": "ext\\pdf\\generate(ENTITY_TYPE, ENTITY_ID, TEMPLATE_ID, FILENAME)"
        }
    ]
}